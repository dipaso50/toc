// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package organizebyrule

import (
	"sync"
	"tocV2/toc/domain"
)

// Ensure, that OrganizeByRuleMock does implement OrganizeByRule.
// If this is not the case, regenerate this file with moq.
var _ OrganizeByRule = &OrganizeByRuleMock{}

// OrganizeByRuleMock is a mock implementation of OrganizeByRule.
//
// 	func TestSomethingThatUsesOrganizeByRule(t *testing.T) {
//
// 		// make and configure a mocked OrganizeByRule
// 		mockedOrganizeByRule := &OrganizeByRuleMock{
// 			CreateDirectoryFunc: func(dirname string) error {
// 				panic("mock out the CreateDirectory method")
// 			},
// 			ExistsDirectoryFunc: func(dirname string) (bool, error) {
// 				panic("mock out the ExistsDirectory method")
// 			},
// 			IterateOverDirectoryFunc: func(dirname string, fn Move) error {
// 				panic("mock out the IterateOverDirectory method")
// 			},
// 			MoveFileFunc: func(file domain.FileOrganizer) error {
// 				panic("mock out the MoveFile method")
// 			},
// 		}
//
// 		// use mockedOrganizeByRule in code that requires OrganizeByRule
// 		// and then make assertions.
//
// 	}
type OrganizeByRuleMock struct {
	// CreateDirectoryFunc mocks the CreateDirectory method.
	CreateDirectoryFunc func(dirname string) error

	// ExistsDirectoryFunc mocks the ExistsDirectory method.
	ExistsDirectoryFunc func(dirname string) (bool, error)

	// IterateOverDirectoryFunc mocks the IterateOverDirectory method.
	IterateOverDirectoryFunc func(dirname string, fn Move) error

	// MoveFileFunc mocks the MoveFile method.
	MoveFileFunc func(file domain.FileOrganizer) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateDirectory holds details about calls to the CreateDirectory method.
		CreateDirectory []struct {
			// Dirname is the dirname argument value.
			Dirname string
		}
		// ExistsDirectory holds details about calls to the ExistsDirectory method.
		ExistsDirectory []struct {
			// Dirname is the dirname argument value.
			Dirname string
		}
		// IterateOverDirectory holds details about calls to the IterateOverDirectory method.
		IterateOverDirectory []struct {
			// Dirname is the dirname argument value.
			Dirname string
			// Fn is the fn argument value.
			Fn Move
		}
		// MoveFile holds details about calls to the MoveFile method.
		MoveFile []struct {
			// File is the file argument value.
			File domain.FileOrganizer
		}
	}
	lockCreateDirectory      sync.RWMutex
	lockExistsDirectory      sync.RWMutex
	lockIterateOverDirectory sync.RWMutex
	lockMoveFile             sync.RWMutex
}

// CreateDirectory calls CreateDirectoryFunc.
func (mock *OrganizeByRuleMock) CreateDirectory(dirname string) error {
	if mock.CreateDirectoryFunc == nil {
		panic("OrganizeByRuleMock.CreateDirectoryFunc: method is nil but OrganizeByRule.CreateDirectory was just called")
	}
	callInfo := struct {
		Dirname string
	}{
		Dirname: dirname,
	}
	mock.lockCreateDirectory.Lock()
	mock.calls.CreateDirectory = append(mock.calls.CreateDirectory, callInfo)
	mock.lockCreateDirectory.Unlock()
	return mock.CreateDirectoryFunc(dirname)
}

// CreateDirectoryCalls gets all the calls that were made to CreateDirectory.
// Check the length with:
//     len(mockedOrganizeByRule.CreateDirectoryCalls())
func (mock *OrganizeByRuleMock) CreateDirectoryCalls() []struct {
	Dirname string
} {
	var calls []struct {
		Dirname string
	}
	mock.lockCreateDirectory.RLock()
	calls = mock.calls.CreateDirectory
	mock.lockCreateDirectory.RUnlock()
	return calls
}

// ExistsDirectory calls ExistsDirectoryFunc.
func (mock *OrganizeByRuleMock) ExistsDirectory(dirname string) (bool, error) {
	if mock.ExistsDirectoryFunc == nil {
		panic("OrganizeByRuleMock.ExistsDirectoryFunc: method is nil but OrganizeByRule.ExistsDirectory was just called")
	}
	callInfo := struct {
		Dirname string
	}{
		Dirname: dirname,
	}
	mock.lockExistsDirectory.Lock()
	mock.calls.ExistsDirectory = append(mock.calls.ExistsDirectory, callInfo)
	mock.lockExistsDirectory.Unlock()
	return mock.ExistsDirectoryFunc(dirname)
}

// ExistsDirectoryCalls gets all the calls that were made to ExistsDirectory.
// Check the length with:
//     len(mockedOrganizeByRule.ExistsDirectoryCalls())
func (mock *OrganizeByRuleMock) ExistsDirectoryCalls() []struct {
	Dirname string
} {
	var calls []struct {
		Dirname string
	}
	mock.lockExistsDirectory.RLock()
	calls = mock.calls.ExistsDirectory
	mock.lockExistsDirectory.RUnlock()
	return calls
}

// IterateOverDirectory calls IterateOverDirectoryFunc.
func (mock *OrganizeByRuleMock) IterateOverDirectory(dirname string, fn Move) error {
	if mock.IterateOverDirectoryFunc == nil {
		panic("OrganizeByRuleMock.IterateOverDirectoryFunc: method is nil but OrganizeByRule.IterateOverDirectory was just called")
	}
	callInfo := struct {
		Dirname string
		Fn      Move
	}{
		Dirname: dirname,
		Fn:      fn,
	}
	mock.lockIterateOverDirectory.Lock()
	mock.calls.IterateOverDirectory = append(mock.calls.IterateOverDirectory, callInfo)
	mock.lockIterateOverDirectory.Unlock()
	return mock.IterateOverDirectoryFunc(dirname, fn)
}

// IterateOverDirectoryCalls gets all the calls that were made to IterateOverDirectory.
// Check the length with:
//     len(mockedOrganizeByRule.IterateOverDirectoryCalls())
func (mock *OrganizeByRuleMock) IterateOverDirectoryCalls() []struct {
	Dirname string
	Fn      Move
} {
	var calls []struct {
		Dirname string
		Fn      Move
	}
	mock.lockIterateOverDirectory.RLock()
	calls = mock.calls.IterateOverDirectory
	mock.lockIterateOverDirectory.RUnlock()
	return calls
}

// MoveFile calls MoveFileFunc.
func (mock *OrganizeByRuleMock) MoveFile(file domain.FileOrganizer) error {
	if mock.MoveFileFunc == nil {
		panic("OrganizeByRuleMock.MoveFileFunc: method is nil but OrganizeByRule.MoveFile was just called")
	}
	callInfo := struct {
		File domain.FileOrganizer
	}{
		File: file,
	}
	mock.lockMoveFile.Lock()
	mock.calls.MoveFile = append(mock.calls.MoveFile, callInfo)
	mock.lockMoveFile.Unlock()
	return mock.MoveFileFunc(file)
}

// MoveFileCalls gets all the calls that were made to MoveFile.
// Check the length with:
//     len(mockedOrganizeByRule.MoveFileCalls())
func (mock *OrganizeByRuleMock) MoveFileCalls() []struct {
	File domain.FileOrganizer
} {
	var calls []struct {
		File domain.FileOrganizer
	}
	mock.lockMoveFile.RLock()
	calls = mock.calls.MoveFile
	mock.lockMoveFile.RUnlock()
	return calls
}
